/*
* UNIDAD V: FUNCIONES ESPECÍFICAS
* CÓDIGO 24: MANEJO DE MODOS POWER SAVE
* OBJETIVO: Realizar lecturas del conversor análogo digital y luego
apagarlo por el tiempo establecido por el usuario
* funciones:
* power_xx_disable(): Deshabilita el modo
* power_xx_enable(): Habilita el modo
* xx: adc
* timer0
* lcd
* timer1
* usart
* all
* https://www.nongnu.org/avr-libc/usermanual/group__avr__power.html
* Nombre:Israel Erazo
*/
#include <MsTimer2.h> // librería timer 2
#include <avr/power.h> // librería power
#include <avr/sleep.h> // librería sleep
int on=0; // variable de encendido y modos del sistema
int tiempo=0; // variable de selección de tiempo para toma de datos
int cont=0; // conteo de timer 2
void setup() {
Serial.begin(9600); //inicia cx serial
MsTimer2::set(1000, reloj); // configura timer 2 a un segundo
attachInterrupt(0,activacion,LOW);
attachInterrupt(1,configuracion,LOW);
power_adc_disable(); // deshabilidad adc
}
void loop() {
 Serial.println(analogRead(0)); // confirmación de desactivación del cad
 delay(1000);
}
void activacion (){ // rutina de interrupción 0
switch(on){ case 0: // caso de activación
 Serial.println("INICIO DEL SISTEMA");
 Serial.println("SELECCIONE TIEMPO DE LECTURA DEL CAD");
 on++;
 break;
 case 1: // caso de selección de tiempo
 Serial.println(String("SISTEMA FUNCIONANADO EN: ")+String(tiempo
)+String(" seg"));
 MsTimer2::start(); // activa timer
 on++;
 break;
 case 2: // sistema apagado
 Serial.println("SISTEMA APAGADO");
 tiempo=0;
 on=0;
 MsTimer2::stop(); // detiene timer
 power_adc_disable(); // deshabilidad adc
break;
 } 
}
void configuracion(){ // rutina interrupcion 1
 if(on==1){
 tiempo=tiempo+10;
 if(tiempo<110){
 Serial.println(String("TIEMPO: ")+String(tiempo));
 }
 else
 tiempo=0;
 }
}
void reloj(){ // rutina de timer 2
 cont++; // cuenta cada segundo
 Serial.println(String("Lectura en: ")+String(tiempo-cont)); // mensaje de tiempo
 if(cont==tiempo){ // comparación con selección de usuario
 power_adc_enable(); // habilita adc
 delay(10);
 Serial.println(analogRead(0)); // realiza la lectura
 cont=0; // contador a cero
 }
 
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
* CAPÍTULO 5: FUNCIONES ESPECÍFICAS
* PROGRAMA 26: Manejo de prioridades en RTOS
* OBJETIVO: Ejecutar tareas directamente en el Kernel del uC.
* NOMBRE:Erazo Israel
*/
#include <Arduino_FreeRTOS.h> // librería de RTOS
// LEDS EN ARDUINO PARA SIMULACIÓN DE PROCESOS
#define RED 8
#define YELLOW 7
#define BLUE 6
//objeto del gestor tareas
typedef int TaskProfiler;
//definir las tareas
TaskProfiler redLEDProfiler;
TaskProfiler yellowLEDProfiler;
TaskProfiler blueLEDProfiler;
TaskHandle_t red_Handle,blue_Handle,yellow_Handle; // manejar la prioridad
int monitor_suspend=0;
void setup() {
Serial.begin(9600);
//crear las rutinas de cada tarea
xTaskCreate(redLedControllerTask,"Red LED Task",100,NULL,1,&red_Handle); //rutina,nombre,memoria,NULL,prioridad,Manejo de prioridad
xTaskCreate(blueLedControllerTask,"Blue LED Task",100,NULL,1,&blue_Handle); //rutina,nombre,memoria,NULL,prioridad,NULL
xTaskCreate(yellowLedControllerTask,"Yellow LED Task",100,NULL,1,&yellow_Handle); //rutina,nombre,memoria,NULL,prioridad,NULL
}
void redLedControllerTask(void *pvParameters){//tarea 1
 pinMode(RED,OUTPUT);
 while(1){
 //Serial.println("Proceso led rojo");
 redLEDProfiler++;
 Serial.print("RED TASK:");
 Serial.println(redLEDProfiler);
 digitalWrite(RED,digitalRead(RED)^1);
 vTaskDelay(50); }
}
void blueLedControllerTask (void *pvParameters){
pinMode(BLUE,OUTPUT);
 while(1){
 //Serial.println("Proceso led azul");
 blueLEDProfiler++;
 Serial.print("BLUE TASK:");
 Serial.println(blueLEDProfiler);
 digitalWrite(BLUE,digitalRead(BLUE)^1);
 vTaskDelay(50);
 }
}
void yellowLedControllerTask (void *pvParameters){
pinMode(YELLOW,OUTPUT);
while(1){
 //Serial.println("Proceso led amarillo");
 yellowLEDProfiler++;
 Serial.print("YELLOW TASK:");
 Serial.println(yellowLEDProfiler);
 digitalWrite(YELLOW,digitalRead(YELLOW)^1);
 // vTaskPrioritySet(red_Handle,2); // modificar prioridad de la rutina de led rojo no debe haber delays
 monitor_suspend++;
 if(monitor_suspend==10){
 vTaskSuspend(red_Handle);
 }
 if(monitor_suspend==20){
 vTaskResume(red_Handle);
 monitor_suspend=0;
 }
 vTaskDelay(50);
 }
}
void loop() {
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
* CAPÍTULO 5: FUNCIONES ESPECÍFICAS
* PROGRAMA 27: Envío de datos entre tareas
* OBJETIVO: Ejecutar tareas directamente en el Kernel del uC.
* NOMBRE:Israel Erazo
*/
#include <Arduino_FreeRTOS.h>
#include "queue.h"
QueueHandle_t yearQueue;
void setup()
{
Serial.begin(9600);
yearQueue = xQueueCreate(5,sizeof(int32_t));
xTaskCreate(vSenderTask,"Sender Task",100,NULL,1,NULL);
xTaskCreate(vReceiverTask,"Receiver Task", 100,NULL, 1, NULL);
 
}
void vSenderTask(void *pvParameters)
{
 BaseType_t qStatus;
 int32_t valueToSend = 1999;
 while(1)
 {
 valueToSend++;
 qStatus = xQueueSend(yearQueue,&valueToSend,0);
 vTaskDelay(50);
 }
}
void vReceiverTask(void *pvParameters)
{
 int32_t valueReceived;
 BaseType_t qStatus;
 const TickType_t xTicksToWait = pdMS_TO_TICKS(500);
 while(1){ 
  xQueueReceive(yearQueue,&valueReceived,xTicksToWait);
 Serial.print("Received value : ");
 Serial.println(valueReceived);
 vTaskDelay(1);
 }
}
void loop(){}
